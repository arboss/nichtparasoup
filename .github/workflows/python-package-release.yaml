# GitHubActions for releasing
# read the docs: https://help.github.com/en/actions/configuring-and-managing-workflows/configuring-a-workflow
# see for event payloads: https://docs.github.com/en/developers/webhooks-and-events/webhook-events-and-payloads#release

name: Release ${{ github.event.release.tag_name }}

on:
  release:
    types:
      - created

defaults:
  run:
    working-directory: python-package

jobs:
  test-version:
    name: Assert version
    # assure that the correct version is marked where needed
    runs-on: ubuntu-latest
    steps:
      - name: Fetch Code
        # see https://github.com/actions/checkout
        uses: actions/checkout@v2
      - name: Setup Python
        # see https://github.com/actions/setup-python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'
      - name: get package version
        id: package
        run: echo "::set-output name=version::$(python setup.py --version)"
      - name: get nichtparasoup version
        id: nichtparasoup
        run: |
          from nichtparasoup import __version__
          print(f'::set-output name=version::{__version__}', sep='', flush=True)
        shell: python
        env:
          PYTHONPATH: src
      - name: Assert package_version
        if: ${{ steps.package.outputs.version != github.event.release.tag_name }}
        run: |
          echo ERROR: assertion mismatch
          echo package.version : ${{ steps.package.outputs.version }}
          echo release.tag_name: ${{ github.event.release.tag_name }}
          exit 1
      - name: Assert nichtparasoup_version
        if: ${{ steps.nichtparasoup.outputs.version != github.event.release.tag_name }}
        run: |
          echo ERROR: assertion mismatch
          echo nichtparasoup.version: ${{ steps.nichtparasoup.outputs.version }}
          echo release.tag_name     : ${{ github.event.release.tag_name }}
          exit 2

  test:
    name: Tests
    # these tests are just to ensure that a minimal quality is given. full tests are done in `tests` action
    runs-on: ubuntu-latest
    steps:
      - name: Fetch Code
        # see https://github.com/actions/checkout
        uses: actions/checkout@v2
      - name: Setup Python
        # see https://github.com/actions/setup-python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'
      - name: Install dependencies
        run: |
          python -m pip install wheel setuptools pip
          python -m pip install -r requirements/tox.txt
      - name: Test nichtparasoup
        run: python -m tox -r -s false -- -n auto
        env:
          TOXENV: style, tests_start, py38
          TOX_PARALLEL_NO_SPINNER: 1

  build:
    name: Build
    needs: ['test-version']
    # build in an isolated env
    runs-on: ubuntu-latest
    steps:
      - name: Fetch Code
        # see https://github.com/actions/checkout
        uses: actions/checkout@v2
      - name: Setup Python
        # see https://github.com/actions/setup-python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'
      - name: Install dependencies
        run: |
          python -m pip install -U wheel setuptools pip
          python -m pip install -r requirements/build.txt
      - name: Build package
        run: |
          rm -rf build dist
          python -m pep517.build --source --binary --out-dir dist .
      - name: Upload build results
        # see https://github.com/actions/upload-artifact
        uses: actions/upload-artifact@v2
        with:
          name: build-results
          path: python-package/dist

  publish-pypi:
    name: Publish to PyPI
    needs: ['test', 'build']
    if: ${{ github.repository_owner == 'k4cg' }}
    runs-on: ubuntu-latest
    steps:
      - name: Download build results
        # see https://github.com/actions/download-artifact
        uses: actions/download-artifact@v2
        with:
          name: build-results
          path: dist
      - name: Publish
        # see https://github.com/pypa/gh-action-pypi-publish
        uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
          password: ${{ secrets.PYPI_TOKEN }}
          packages_dir: dist
